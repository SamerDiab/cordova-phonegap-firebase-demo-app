
/*
 * Copyright 2019 Samer Diab emil: contact@samerdiab.net
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var Gradle_builder = require('../../../bin/templates/cordova/lib/builders/GradleBuilder.js');
var fs = require('fs');
var Q = require('q');
var superspawn = require('cordova-common').superspawn;
var builder;

describe('Gradle Builder', function () {
    beforeEach(function () {
        spyOn(fs, 'existsSync').and.returnValue(true);
        builder = new Gradle_builder('/root');
        var deferred = Q.defer();
        spyOn(superspawn, 'spawn').and.returnValue(deferred.promise);
    });

    describe('runGradleWrapper method', function () {
        it('should run the provided gradle command if a gradle wrapper does not already exist', function () {
            fs.existsSync.and.returnValue(false);
            builder.runGradleWrapper('/my/sweet/gradle');
            expect(superspawn.spawn).toHaveBeenCalledWith('/my/sweet/gradle', jasmine.any(Array), jasmine.any(Object));
        });
        it('should do nothing if a gradle wrapper exists in the project directory', function () {
            fs.existsSync.and.returnValue(true);
            builder.runGradleWrapper('/my/sweet/gradle');
            expect(superspawn.spawn).not.toHaveBeenCalledWith('/my/sweet/gradle', jasmine.any(Array), jasmine.any(Object));
        });
    });
});
